import random
from typing import List, Optional, Union

import backoff
from google.api_core.exceptions import ResourceExhausted
from PIL.Image import Image

from src.settings import settings

from .prompts import PROMPTS
from .utils import get_google_gen_model


class ImageCaptioner:
    def __init__(
        self,
        model_name: Optional[str] = None,
        prompts: Optional[List[str]] = None,
    ):
        """
        Initialize the ImageCaptioner.

        Args:
            model_name (Optional[str]): The name of the generative model to\
            use for image captioning. See\
    [the documentation](https://ai.google.dev/gemini-api/docs/models/gemini)\
            for the available models. The chosen model must support image\
            inputs.

            prompts (Optional[List[str]]): A list of prompts to use for\
            captions. Defaults to the PROMPTS defined in `prompts.py`.
        """
        self.model = get_google_gen_model(model_name=model_name)
        self.prompts = prompts or PROMPTS

    # The `backoff.on_exception` decorator is used to retry the function
    # when a `ResourceExhausted` exception is raised. This is useful when
    # the API rate limit is exceeded.
    @backoff.on_exception(
        backoff.expo,
        ResourceExhausted,
        max_tries=settings.backoff_max_tries,
        max_time=settings.backoff_max_time,
        raise_on_giveup=False,
        jitter=backoff.full_jitter,
    )
    def caption_image(self, image: Image) -> Union[str, None]:
        """
        Generate a caption for the given image. The caption is generated\
        using the generative model. The caption is generated by providing\
        a prompt and the image to the model. The prompt is randomly selected\
        from `self.prompts`.

        Args:
            image (PIL.Image.Image): The image to generate a caption for.

        Returns:
            Union[str, None]: The generated caption or None if the caption\
            could not be generated (e.g. due to rate limiting, safety filters,\
            etc.).

        Raises:
            google.api_core.exceptions.*: Any exceptions raised by the API.\
            These exceptions may be due to invalid API keys, unsupported\
            locations, etc.
        """
        prompt = random.choice(self.prompts)  # randomly select a prompt

        response = self.model.generate_content([prompt, image])

        parts = response.parts
        if not parts:
            return None

        return response.text
